package a1;
public class LargeInt implements LargeIntInterface {
    private boolean negative;
    private SpecializedList numList;

    public LargeInt(String num) {
        negative = false;
        numList = new SpecializedList();

        // Check if number is negative and store sign
        if (num.charAt(0) == '-') {
            negative = true;
            num = num.substring(1);
        }

        // Store each digit in the specialized list
        for (int i = num.length() - 1; i >= 0; i--) {
            numList.insertEnd((byte) (num.charAt(i) - '0'));
        }
    }

    @Override
    public LargeInt add(LargeInt num) {
        LargeInt result = new LargeInt("0");
        byte carry = 0;

        numList.resetForward();
        num.numList.resetForward();

        // Add each digit of both numbers, store the carry for next iteration
        while (numList.lengthIs() > 0 || num.numList.lengthIs() > 0) {
            byte a = (numList.lengthIs() > 0) ? numList.getNextItem() : 0;
            byte b = (num.numList.lengthIs() > 0) ? num.numList.getNextItem() : 0;
            byte sum = (byte) (a + b + carry);
            result.numList.insertFront((byte) (sum % 10));
            carry = (byte) (sum / 10);
        }

        // Insert any remaining carry
        if (carry != 0) {
            result.numList.insertFront(carry);
        }

        // Check if both numbers have same sign, set the result sign accordingly
        result.negative = negative == num.negative;

        return result;
    }

    @Override
    public LargeInt subtract(LargeInt num) {
        LargeInt result = new LargeInt("0");
        byte carry = 0;

        numList.resetForward();
        num.numList.resetForward();

        // Subtract each digit of num1 from num2, store the carry for next iteration
        while (numList.lengthIs() > 0 || num.numList.lengthIs() > 0) {
            byte a = (numList.lengthIs() > 0) ? numList.getNextItem() : 0;
            byte b = (num.numList.lengthIs() > 0) ? num.numList.getNextItem() : 0;
            byte diff = (byte) (a - b - carry);
            if (diff < 0) {
                diff = (byte) (diff + 10);
                carry = 1;
            } else {
                carry = 0;
            }
            result.numList.insertFront(diff);
        }

        // Check if num1 is less than num2, set the result sign accordingly
        if (negative != num.negative && numList.lengthIs() < num.numList.lengthIs()) {
            result.negative = !negative;
        }

        // Remove any leading zeros
        while (result.numList.lengthIs() > 1 && result.numList.getNextItem() == 0) {
            result.numList.insertEnd((byte) 0);
        }

        return result;
    }

    @Override
    public void setNegative() {
        negative = !negative;
    }
    
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        numList.resetForward();
        while (numList.lengthIs() > 0) {
            result.append(numList.getNextItem());
        }
        return (negative ? "-" : "") + result.reverse().toString();
    }
}
